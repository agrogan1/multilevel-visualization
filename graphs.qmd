# Graphs

```{r}
#| label: graphsetup
#| echo: false
#| output: false

library(Statamarkdown)

library(lme4) 

library(JuliaCall)

julia_setup(JULIA_HOME = "/Applications/Julia-1.8.app/Contents/Resources/julia/bin")

```

::: {.callout-caution}
## Order of Variables

Across software platforms pay attention to the order of variables. I generally use `x` for an *independent* variable along the horizontal axis and `y` for a *dependent* variable along the vertical axis. Different software asks for the variables to be listed in different order so it is worth paying close attention to the syntax.
:::

## Scatterplots

A scatterplot is one of the most basic of all data visualizations. At the same time, a scatterplot can be tremendously informative because it provides: the location of every data point (data points may be overprinted); a sense of the distribution of both the *x* and *y* variables; and a sense of the overall trend in the relationship between the two variables, if there is one.

::: {.panel-tabset group="language"}

### Stata

#### Get The Data

```{stata, collectcode=TRUE}

use simulated_multilevel_data.dta

```

#### Scatterplot

```{stata}
#| fig-height: 3

twoway scatter outcome warmth, ///
  xtitle("warmth") ytitle("outcome") ///
  title("Outcome by Parental Warmth") 

quietly graph export scatter.png, replace

```

![Outcome by Parental Warmth (Stata)](scatter.png){#fig-Stata}

### R

#### Get The Data

```{r}

library(haven)

df <- read_dta("simulated_multilevel_data.dta")

```

#### Scatterplot

```{r}
#| fig-height: 3
#| label: fig-R
#| fig-cap: "Outcome by Parental Warmth (R)"

library(ggplot2)

ggplot(df,
       aes(x = warmth,
           y = outcome)) +
  geom_point() +
  labs(title = "Outcome by Parental Warmth")

```

### Julia

#### Get The Data

```{julia}
#| output: false
#| label: Julia-getdata

using Tables, MixedModels, StatFiles, DataFrames, CategoricalArrays, DataFramesMeta

df = DataFrame(load("simulated_multilevel_data.dta"))

```

#### Scatterplot

```{julia}
#| fig-height: 3
#| label: fig-Julia
#| fig-cap: "Outcome by Parental Warmth (Julia)"

using StatsPlots

@df df scatter(:warmth, :outcome, 
               title = "Outcome by Parental Warmth",
               ylabel = "outcome",
               xlabel = "parental warmth")

```

:::

## Line Graph (Linear Trend)

A line graph of the data focuses in on the linear trend in the data.

::: {.panel-tabset group="language"}

### Stata

#### Get The Data 

```{stata, collectcode=TRUE}

use simulated_multilevel_data.dta

```

#### Line Graph

```{stata}
#| fig-height: 3

twoway lfit outcome warmth, ///
  xtitle("warmth") ytitle("outcome") ///
  title("Outcome by Parental Warmth") 

quietly graph export lfit.png, replace

```

![Outcome by Parental Warmth (Stata)](lfit.png){#fig-Statalfit}

### R

#### Get The Data

```{r}

library(haven)

df <- read_dta("simulated_multilevel_data.dta")

```

#### Line Graph

```{r}
#| fig-height: 3
#| label: fig-Rlfit
#| fig-cap: "Outcome by Parental Warmth (R)"

library(ggplot2)

ggplot(df,
       aes(y = outcome,
           x = warmth)) +
  geom_smooth(method = "lm") +
labs(title = "Outcome by Parental Warmth")

```

### Julia

#### Get The Data

```{julia}
#| output: false

using Tables, MixedModels, StatFiles, DataFrames, CategoricalArrays, DataFramesMeta

dfL = DataFrame(load("simulated_multilevel_data.dta"))

```

#### Line Graph

To make our plot with a smoother in Julia, we set the `markercolor` and `markerstrokecolor` to be *white*, and the `smooth` option to `:true`.

```{julia}
#| fig-height: 3
#| label: fig-Julialfit
#| fig-cap: "Outcome by Parental Warmth (Julia)"

using StatsPlots

@df dfL scatter(:warmth, :outcome, 
               title = "Outcome by Parental Warmth",
               ylabel = "outcome",
               xlabel = "warmth",
               markercolor = "white",
               markerstrokecolor = "white",
               smooth=:true)

```

:::

## Spaghetti Plots

A *spaghetti plot* might be considered the most *multilevel* of the visualizations here considered. A spaghetti plot shows the group specific slopes and intercepts for all of the groups in the data. 

::: {.panel-tabset group="language"}

### Stata

In Stata, spaghetti plots are most easily generated using the user written `spagplot` command. Type `findit spagplot` to install this command.

#### Get The Data

```{stata, collectcode=TRUE}

use simulated_multilevel_data.dta

```

#### Spaghetti Plot

::: {.callout-tip}
##### Installing `spagplot`

`spagplot` is a user written command. Type `findit spagplot` to install.
:::

```{stata}
#| fig-height: 3

spagplot outcome warmth, ///
  id(country) ///
  xtitle("parental warmth") ytitle("outcome") ///
  title("Outcome by Parental Warmth") 

quietly graph export spagplot.png, replace

```

![Outcome by Parental Warmth (Stata)](spagplot.png){#fig-Stataspagplot}

### R

#### Get The Data

```{r}

library(haven)

df <- read_dta("simulated_multilevel_data.dta")

```

#### Spaghetti Plot

```{r}
#| fig-height: 3
#| label: fig-Rspagplot
#| fig-cap: "Outcome by Parental Warmth (R)"

library(ggplot2)

df$country <- factor(df$country)

ggplot(df,
       aes(y = outcome,
           x = warmth)) +
  geom_smooth(aes(color = country,
                  group = country), 
              method = "lm",
              se = FALSE) +
    geom_smooth(method = "lm", linewidth = 3) +
labs(title = "Outcome by Parental Warmth")

```

### Julia

#### Get The Data

```{julia}
#| output: false

using Tables, MixedModels, StatFiles, DataFrames, CategoricalArrays, DataFramesMeta

dfL = DataFrame(load("simulated_multilevel_data.dta"))

```

#### Spaghetti Plot

```{julia}
#| fig-height: 3
#| label: fig-Juliaspagplot
#| fig-cap: "Outcome by Parental Warmth (Julia)"
#| fig-width: 5

using StatsPlots

@df dfL scatter(:warmth, :outcome, 
               title = "Outcome by Parental Warmth",
               ylabel = "outcome",
               xlabel = "warmth",
               markercolor = "white",
               markerstrokecolor = "white",
               group = :country,
               legend = false,
               smooth=:true)

```

:::


